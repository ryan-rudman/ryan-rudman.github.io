import{s as c,d as t,h as m,a as i,u as s,l as r,b as p,i as u}from"./index-PYr0z4lB.js";import{S as f,a as g}from"./sectionIntro-VhN2Xr8M.js";const b="RYAN RUDMAN",y="personal projects",w="red-theme",S="Building from scratch, experimenting with different ideas and learning from trial and error is my preferred way of really understanding how things work.",k="With the abundance of today's pre-fabricated offerings, it is easier than ever just to add the frills. Sometimes it's more interesting to learn how to lay the foundations than it is to layer the paint.",v="Here are some of my own projects which I have been busy with recently. They are in various stages of completeness and I am looking at updating documentation asap.",h={heading:"RECENT PROJECTS",projects:[{name:"KARBON",title:"Unique JS framework for building user interfaces",summary:"<p>Karbon is my own take on what a UI framework should look like. It takes inspiration from Elm's functional approach while remaining undogmatic, pragmatic and retaining the flexibility that JS offers.</p><p> I started building Karbon as a way to understand the virtual DOM approach used in React and other popular frameworks. However, I realised that I could go much further than this and try to address some of the things I disliked about the component approach; creating something with more separated concerns around the view and model layers and a more logical approach to state and effects management.</p><p>The result was Karbon which is a fully functional UI framework. In fact this site is built with it. Have a look at the <a href='https://github.com/RyanR26/RyanR26.github.io/tree/main/portfolio/src/' target='_blank'>source code</a> if you are curious.</p><p class='font-xsmall'>* Documentation is still a work in progress..</p>",usps:["Single state app","Separated concerns","Unique view api","State manager","Effects manager","Subscriptions api","SSR","Lazy views"],links:[{url:"https://github.com/RyanR26/karbon",label:"See project on Github",img:"/images/logos/github-icon.png"}]},{name:"PARALLEX",title:"JS library for parallax scrolling effects",summary:"<p>After failing in my search to find a parallax library that could handle the fine grained control that was required for a specific project I ended up creating my own library.</p><p>I needed the ability to handle parallax speed, direction and active state for each element easily, directly from the HTML using data attributes and classes, in addition to allowing for manual interaction via a set of start/stop/pause controls in JS.</p><p>Out of the frustration with not finding one package that could do it all I created Parallex to handle these requirements effortlessly.</p><p class='font-xsmall'>* Documentation coming soon.</p> ",usps:["Declarative code","HTML augmentation","Parallax scrolling effects","SASS","Manual control via JS"],links:[{url:"https://github.com/RyanR26/Parallex",label:"See project on Github",img:"/images/logos/github-icon.png"}]},{name:"MOVIMENTO",title:"CSS animations library",summary:"<p>Animation properties introduced in CSS3 have given us immense power for amazing page animations and transitions, however, being handled directly in the CSS stylesheet can lead to bloat and become more of a hassle for quick implementation and reuse.</p><p>Originally built for a commercial project where we needed building blocks to quickly scafflod new componenets with a range of animations. This library allows CSS animations to be quickly implemented via data attributes directly in the HTML.</p><p>I have also created a React component that can make use of the library in a similar fashion to the React Transition Group CSSTransition component.</p><p class='font-xsmall'>* Repo not public yet - coming very ssoon</p>",usps:["Declarative code","HTML augmentation","CCS3 animations","Sass","Fine control via JS","React component"],links:[{url:"",label:"See project on Github",img:"/images/logos/github-icon.png"}]}]},T=d=>(a,e,{component:l})=>{l({ScreenContainerView:f},{props:{title:b,section:y,colorTheme:w,scrollPosition:d.scrollPosition,children:()=>{l({SectionIntroView:g},{props:{intro:S,subIntro:k,content:v,underline:!1}}),a(c,{class:"dark-theme"}),a(t,{class:"container"}),a(m,{class:"content-section underline",text:h.heading}),e(m),e(t),a(t,{class:"project-showcase-container spacer"}),h.projects.forEach(o=>{a(t,{class:"container spacer-sm intro-animation intro-animation-fade"}),a(t,{class:"content-section underline"}),a(t,{class:"project-title spacer"}),a(i,{class:"text-subheading",text:o.name}),e(i),a(i,{class:"",text:" - "+o.title}),e(i),e(t),a(s,{class:"tech-list spacer-sm"}),o.usps.forEach(n=>{a(r,{class:"tech-name font-small",text:n}),e(r)}),e(s),a(t,{class:"font-small spacer-sm",innerHTML:o.summary}),e(t),a(s,{class:"spacer-sm"}),o.links.forEach(n=>{a(r,{class:"font-small"}),a(p,{class:`link ${n.url?"":"link-disable"}`,text:n.label,href:n.url,target:"_blank",...n.url?{}:{tabindex:"-1"}}),a(i,{class:"link-icon"}),a(u,{src:n.img,alt:"logo "}),e(i),e(p),e(r)}),e(s),e(t),e(t)}),e(t),e(c)}}})};export{T as PersonalProjectsView};
